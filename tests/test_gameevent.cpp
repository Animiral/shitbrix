/**
 * Tests for the directorâ€™s usage of the IGameEvent interface.
 */

#include "stage.hpp"
#include "director.hpp"
#include "gameevent.hpp"
#include "mock.hpp"
#include "gtest/gtest.h"

class GameEventCounter : public evt::IGameEvent
{

public:

	virtual void fire(evt::CursorMoves moved) override { countCursorMoves++; }
	virtual void fire(evt::BlocksSwap swapped) override { countBlocksSwap++; }
	virtual void fire(evt::Match matched) override { last_match = matched; }
	virtual void fire(evt::BlockDies died) override { countBlockDies++; }
	virtual void fire(evt::GarbageDissolves dissolved) override { countGarbageDissolves++; }

	int countCursorMoves = 0;
	int countBlocksSwap = 0;
	evt::Match last_match{0,0};
	int countBlockDies = 0;
	int countGarbageDissolves = 0;

};

class GameEventTest : public ::testing::Test
{

protected:

	virtual void SetUp()
	{
		pit = std::make_unique<Pit>(Point{0,0});

		cursor = std::make_unique<Cursor>(RowCol{0,0});
		cursor_director = std::make_unique<CursorDirector>(*pit, *cursor);

		const int SEED = 0;
		rndgen = std::make_shared<std::mt19937>(SEED);
		block_director = std::make_unique<BlockDirector>(*pit, rndgen);

		counter = std::make_unique<GameEventCounter>();
		hub = std::make_unique<evt::GameEventHub>();
		hub->append(*counter);
		block_director->set_handler(*hub);
	}

	// virtual void TearDown() {}

	void run_game_ticks(int ticks)
	{
		for(int t = 0; t < ticks; t++) {
			pit->update(context);
			block_director->update(context);
		}
	}

	MockContext context;
	std::unique_ptr<Pit> pit;
	std::unique_ptr<Cursor> cursor;
	RndGen rndgen;
	std::unique_ptr<CursorDirector> cursor_director;
	std::unique_ptr<BlockDirector> block_director;
	std::unique_ptr<GameEventCounter> counter;
	std::unique_ptr<evt::GameEventHub> hub;

};

/**
 * Tests whether a cursor move event is correctly generated by the CursorDirector.
 */
TEST_F(GameEventTest, CursorMoves)
{
	FAIL();
}

/**
 * Tests whether a blocks swap event is correctly generated by the BlockDirector.
 */
TEST_F(GameEventTest, BlocksSwap)
{
	FAIL();
}

/**
 * Tests whether a match event is correctly generated by the BlockDirector.
 */
TEST_F(GameEventTest, Match)
{
	FAIL();
}

/**
 * Tests whether a block dies event is correctly generated by the BlockDirector.
 */
TEST_F(GameEventTest, BlockDies)
{
	FAIL();
}

/**
 * Tests whether a garbage dissolve event is correctly generated by the BlockDirector.
 */
TEST_F(GameEventTest, GarbageDissolves)
{
	FAIL();
}
